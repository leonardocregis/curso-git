Características diferenciais
- trabalho offline

commandos

Iniciando a criptografia para acessar o github
- no seu diretorio executar o comando abaixo
ss-keygen -t rsa -C "seuemail"

#iniciar um repositorio git , ele trabalha com o diretorio currente como se fosse um repositorio, tudo feito no mesmo será alterado
git init

#lista os arquivos gerenciados pelo git e que pertencem ao diretorio
git ls-files

#comando que adiciona o arquivo para ser rastreado pelo git
git add arquivo1 arquivo2   ou  git add . ou git add *.txt

#commitando com mensagem (pratico senao abre uma janela exigindo isso)
git commit -m "mensagem"

#exibe os commites realizados 
#-p para exibir as diferenças efetivas
git log 

#exibe os arquivos alterados
git whatchanged

#mostra o estado atual do repositorio
#untraked é o indicativo que o arquivo não está ainda sendo rastreado pelo git
git status

#configurando o usuario para ajustar o comits tendo sua identificacao
git config --global user.name "yourname"
git config --global user.email "youremail"

# listar todas as Tags existentes em um projeto
git tag


#verificando a diferenca do que esta comitado como que no repositorio local para ser comitado
git diff --cached nomedoarquivo

#voltar o repositório para alguma versao
git checkout v0.1s

#identifica as diferençcas entre versões
git diff v0.1 v0.2 

#mostra a alteração , data , pessoa , linhas alteradas
git blame nomearquivo

#copiar o diretorio 
git clone [https://url]

---------------------3. Sincronizacao dos dados com o repositorio

#vendo os repositorios remotos existentes
git remote

#criando repositorio remoto
git remote add alias urlrepositorio

#observacao sobre o repositorio remoto, ele segue a seguinte regra de formação: git@github.com:[nomedousuario]/[nomedorepositorio].git
#deve ser usada essa nomenclatura para termos um repositório identico no github

# enviando alteracoes para o repositorio remoto
git push alias branchname

# RESOLVENDO CONFLITOS (com o comando git push alias branchname)
# caso exista conflito o git irá reclamar no envio, a realizaçao do "git pull" ira sincronizar ambos os arquivos se possivel
# se ele nao for capaz ele ira reclamar dizendo que existe um conflito e sera necessario editar o arquivo, apos ter sido corrigido usar o git commit
# entre o < e === é o comite antigo, e o > e === é o commit novo
git add arquivoqtinhaconflito
git commit -m "mensagem"
git push


# recebendo as alterações feitas
git pull alias branchname

# baixando repositorios remotos
git clone urlremoto

#verificando alteraçoes e baixando elas do repositorio remoto
git fetch alias

# ---------------------- TRABALHANDO COM BRANCHES
#listando os branches existentes
#notar que a branch atual , tera um asterisco no inicio do nome na listagem
git branch

#criando uma branch
git branch nomedanovabranch

#trocando de branchs
git checkout nomedabranch

# -----------------------TRABALHANDO COM BRANCH REMOTO

#fazendo push de branch 
git push alias branchname

#na criacao da banch pode ser feito o commando abaixo que já aponta para a branch certa, simplificando o push
#-u diz que o branch devera ser iguao ao do repositorio remoto  , simplifica o push 
git push -u alias branchname 

#visualizando branch remoto 
#-a lista tanto remotas como locais
git branch -r

#cria a branch design e muda para tal
git checkout -b design

#deleta localmente a branch
git branch -d design

#para copiar o branch remoto para sua maquina local
git branch -t branchdesejado alias/branchdesejado

#deletando uma branch remotas
git push origin :branchname

#trocando de branch
git checkout branchname

-------------------8 - contribuicao com opensource(iteragindo com github de outros)

#importando projetos para edicao 
# ir no github , e executar um fork do projeto, que automaticamente cria uma copia do usuario que requisitou do projeto
# depois usando a url do projeto vc poderá fazer o git clone 
git clone [url do seu projeto com fork]



#usando alias
vi ~/.gitconfig

#log
g 
