Características diferenciais
- trabalho offline

commandos

Iniciando a criptografia para acessar o github
- no seu diretorio executar o comando abaixo
ss-keygen -t rsa -C "seuemail"

#iniciar um repositorio git , ele trabalha com o diretorio currente como se fosse um repositorio, tudo feito no mesmo será alterado
git init

#lista os arquivos gerenciados pelo git e que pertencem ao diretorio
git ls-files

#comando que adiciona o arquivo para ser rastreado pelo git
git add arquivo1 arquivo2   ou  git add . ou git add *.txt

#commitando com mensagem (pratico senao abre uma janela exigindo isso)
git commit -m "mensagem"

#exibe os commites realizados 
#-p para exibir as diferenças efetivas
git log 

#exibe os arquivos alterados
git whatchanged

#mostra o estado atual do repositorio
#untraked é o indicativo que o arquivo não está ainda sendo rastreado pelo git
git status

#configurando o usuario para ajustar o comits tendo sua identificacao
git config --global user.name "yourname"
git config --global user.email "youremail"

# listar todas as Tags existentes em um projeto
	git tag


#verificando a diferenca do que esta comitado como que no repositorio local para ser comitado
git diff --cached nomedoarquivo

#voltar o repositório para alguma versao
	git checkout v0.1s

#identifica as diferençcas entre versões
	git diff v0.1 v0.2 

#mostra a alteração , data , pessoa , linhas alteradas
	git blame nomearquivo

#copiar o diretorio 
	git clone [https://url]

---------------------3. Sincronizacao dos dados com o repositorio

#vendo os repositorios remotos existentes
git remote

#criando repositorio remoto
git remote add alias urlrepositorio

#observacao sobre o repositorio remoto, ele segue a seguinte regra de formação: git@github.com:[nomedousuario]/[nomedorepositorio].git
#deve ser usada essa nomenclatura para termos um repositório identico no github

# enviando alteracoes para o repositorio remoto
git push alias branchname

# RESOLVENDO CONFLITOS (com o comando git push alias branchname)
# caso exista conflito o git irá reclamar no envio, a realizaçao do "git pull" ira sincronizar ambos os arquivos se possivel
# se ele nao for capaz ele ira reclamar dizendo que existe um conflito e sera necessario editar o arquivo, apos ter sido corrigido usar o git commit
# entre o < e === é o comite antigo, e o > e === é o commit novo
git add arquivoqtinhaconflito
git commit -m "mensagem"
git push


# recebendo as alterações feitas
git pull alias branchname

# baixando repositorios remotos
git clone urlremoto

#verificando alteraçoes e baixando elas do repositorio remoto
git fetch alias

# ---------------------- TRABALHANDO COM BRANCHES
#listando os branches existentes
#notar que a branch atual , tera um asterisco no inicio do nome na listagem
git branch

#criando uma branch
git branch nomedanovabranch

#trocando de branchs
git checkout nomedabranch

# -----------------------TRABALHANDO COM BRANCH REMOTO

#fazendo push de branch 
git push alias branchname

#na criacao da banch pode ser feito o commando abaixo que já aponta para a branch certa, simplificando o push
#-u diz que o branch devera ser iguao ao do repositorio remoto  , simplifica o push 
git push -u alias branchname 

#visualizando branch remoto 
#-a lista tanto remotas como locais
git branch -r

#cria a branch design e muda para tal
git checkout -b design

#deleta localmente a branch
git branch -d design

#para copiar o branch remoto para sua maquina local
git branch -t branchdesejado alias/branchdesejado

#deletando uma branch remotas
git push origin :branchname

#trocando de branch
git checkout branchname

------------------- 5 - Resolucao de conflitos 

	#Quando ocorre um merge, o git automaticamente trata linhas com diferenças facilitando o merge
	# quando ocorre um conflito, aparecerá uma mensagem no sincronismo informando isso a correçao deverá ser feita no arquivo com a seguinte regra:

	#entre <<< e ===== alteração feita externamente
	#entre >>>> e ==== conteudo que conflitou
	#o valor exadecimal depois do >>>> é o identificador do commit que ocorreu o conflito

	#apos a alteracao e salvar o arquivo o padráo normal ocorre
	git commit

6. boas paraticas no uso do git
	#usar o branch
	
	#criar branch pessoal
		git checktout -b meubranch
	#alterar 
		git add nomeitem
		git commit -m 'primeiro commit' nomedoitem
	
	#Fazendo merge dos comits do repositorio, já que no respositorio não existem esses branchs
	#Mudar para branch marster
		git checkout master
	#pegando as alterações e já trazendo para o repositório
		git pull 
	#fazendo o merge da sua branch ao branch em que você está
	#lembre-se que vc está no branch master do repositorio remoto
	
	#tras as alterações da branch para a atual
		git merge nomedabranch
	
	#enviar as alterações para o site
		git push
	
	#atualiza uma branch com base em outra branch, fazendo com que ela siga a sequencia de commits originais encaixando os com a nova
	#por exemplo, vc quer pegar as alterações de outra branch e aloca-las para a sua
	# sem fazer o merge pq vc não quer faze-los
		git rebase
		git rebase origembranch destinoBranch
	# trazendo as alterações par ao master
		git merge
	# enviando para o servidor
		git push
	#continua de onde parou 
		git rebase --continue



7. controle avançado de alterações
	# voltando ao ultimo estado que estava no diretório
		# estado de só add
		git checkout propost_1.htm.
	
		#tirar do status index
		git reset HEAD nomearquivo
		
		#reverter do commit
		#usar o hash do commit para desfazer  e será defeito todos acima dele, usado localmente, remotamente não é legal
		git reset hashDocomit
		
		# ou por numero sem importar com o hash, no exemplo reseta para o antepenúltimo commit
		git reset HEAD~2 
		
		#voltar uma alteração
		git revert hashdocomit
		
		#coloca as alterações no cash para alteração 
		git stash
		#ver o que está em cash
		git stash list
		# pegar o ultimo comando
		git stash pop
		# pegar o stash mais antigo usa-se a sua referencia
		git stash pop stash@{1}
		#pesquisando commits
		git bitsect start
	
	#observaoces gerais
	
		#vc consegue ter seu ambiente construido usando o hash commit feito
		git chekcout hashdocomit

-------------------8 - contribuicao com opensource(iteragindo com github de outros)

	#importando projetos para edicao 
	# ir no github , e executar um fork do projeto, que automaticamente cria uma copia do usuario que requisitou do projeto
	# depois usando a url do projeto vc poderá fazer o git clone 
	git clone [url do seu projeto com fork]
	
	#configurar um apontamento para o projeto original
	git remote add original [url]
	
	#quando for atualizar com as alterações do original, usar o comando fetch
	git fetch original
	
	#para fazer o merge das alterações feitas pelo fetch , usar o merge
	git merge original/master
	
	#sobre o pull request : processo em que vc solicita que suas alterações sejam integradas à outro repositório
	# se ocorrer algo errado o pull request cria no diretorio https://github.com/[dono_do_projeto]/[projeto]/pull/[id_do_pull_request].
	
	
	
	#usando alias, configurado no arquivo .gitconfig
		vi ~/.gitconfig
		#adicionar no arquivo acima o alias na seguinte formatacao
		[alias]
		  st = status
		
		#usando commandos encadeados
		[alias]
		  envia = !git checkout master && git pull && git checkout desenvolvimento && git rebase master && git checkout master && git merge desenvolvimento && git push
		
	#adicionando cores, usando o mesmo arquivo .gitconfig
		[color]
  			diff = auto

	#visualizando log
		#visualizando detalhes das alterações
		git log -p
		
		#exibir a quantidade de linhas alteradas
		git log --stat
		
		# varias maneiras de exibir informações no log escolher uma das entre virgulas
		git log --pretty=[neline, short, medium, full, fuller, email, raw]
		
		#formatando o --pretty 
		log --pretty='%an realizou commit em %ad: %s'
		
		#exibindo um grafico que auxilia
		log --grath

-------- 9 merge avançado com cherry pick

	# ferramenta em que vc pode pegar parte de commits e construir um comit final so com amostragens, a ideia é como se fosse um pedaço de torda (cherry pick)
	
	#uso , pegando os commits , no caso depois que vc quer adicionar à sua branch
	#		2 - 3 - 4 = master
	#	1 - 
	#		5 - 6 - 7 = work
	
	git cherry-pick 4
	
	# 		2 - 3 - 4 = master
	#	1 - 
	#		5 - 6 - 4 = work
	
	# podemos fazer o mesmo usando o hash do arquivo
	git cherry-pick [hash]
	
	